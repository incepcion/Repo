CREATE DATABASE Monsterbase;
USE Monsterbase; 
 --NOT NULL: NADA DE VALORES NULOS
 --unique: cada valor deve ser unico en esa columna
 -- GENERATED: Indica que el valor de la columna se genera automáticamente.
 --BY DEFAULT: Indica que el valor generado se utilizará como valor predeterminado para la columna si no se proporciona un valor explícito.
 --AS IDENTITY: Indica que la columna es una columna de identidad, lo que significa que se autoincrementa automáticamente.

CREATE TABLE "proveedores" (
	"provee_id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"nombre" VARCHAR(666),
	"telefono" VARCHAR(666),
	"email" VARCHAR(666),
	PRIMARY KEY("provee_id")
);

CREATE TABLE "productos" (
	"produc_id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"nombre" VARCHAR(666),
	"descripcion" VARCHAR(666),
	"precio" NUMERIC,
	"provee_id" INTEGER,
	PRIMARY KEY("produc_id")
);

CREATE TABLE "compras" (
	"compra_id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"fecha" DATE,
	"provee_id" INTEGER,
	"total" NUMERIC,
	PRIMARY KEY("compra_id")
);

CREATE TABLE "detalle_compra" (
	"detalle_id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"compra_id" INTEGER,
	"produc_id" INTEGER,
	"cantidad" NUMERIC,
	"precio_uni" NUMERIC,
	PRIMARY KEY("detalle_id")
);

CREATE TABLE "pagos" (
	"pago_id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"compra_id" INTEGER,
	"fecha" DATE,
	"monto" NUMERIC,
	PRIMARY KEY("pago_id")
);

CREATE TABLE "inventario" (
	"inventario_id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"produc_id" INTEGER,
	"cantidad" NUMERIC,
	PRIMARY KEY("inventario_id")
);

-- esto agrega clavesa foráneas a las tablas
ALTER TABLE "productos" 
ADD FOREIGN KEY ("provee_id") REFERENCES "proveedores" ("provee_id"); 
-- Esto significa que el provee_id en productos debe existir en proveedores

ALTER TABLE "detalle_compra" 
ADD FOREIGN KEY ("compra_id") REFERENCES "compras" ("compra_id"),
ADD FOREIGN KEY ("produc_id") REFERENCES "productos" ("produc_id"); 
-- Esto significa que el compra_id en detalle_compra debe existir en compras
-- y el produc_id en detalle_compra debe existir en productos

ALTER TABLE "pagos" 
ADD FOREIGN KEY ("compra_id") REFERENCES "compras" ("compra_id"); 
--el compra_id en pagos debe existir en compras

ALTER TABLE "inventario" 
ADD FOREIGN KEY ("produc_id") REFERENCES "productos" ("produc_id"); 
--el produc_id en inventario debe existir en productos

--esto agrega restricciones de integridad
ALTER TABLE "productos" 
ADD CONSTRAINT "precio_positivo" CHECK ("precio" > 0); 
--significa que el precio de un producto debe ser mayor que 0

ALTER TABLE "inventario" 
ADD CONSTRAINT "cantidad_no_negativa" CHECK ("cantidad" >= 0); 
--significa que la cantidad de un producto en inventario no puede ser negativa